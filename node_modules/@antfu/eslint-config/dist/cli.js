// src/cli/index.ts
import process2 from "process";
import c3 from "picocolors";
import { hideBin } from "yargs/helpers";
import yargs from "yargs";

// src/cli/run.ts
import fs from "fs";
import fsp from "fs/promises";
import path from "path";
import process from "process";
import prompts from "prompts";
import c2 from "picocolors";
import parse from "parse-gitignore";

// src/cli/constants.ts
import c from "picocolors";

// package.json
var version = "1.2.1";

// src/cli/constants.ts
var ARROW = c.cyan("\u2192");
var CHECK = c.green("\u2714");
var CROSS = c.red("\u2718");
var WARN = c.yellow("\u2139");
var vscodeSettingsString = `
  // Enable the ESlint flat config support
  "eslint.experimental.useFlatConfig": true,

  // Disable the default formatter, use eslint instead
  "prettier.enable": false,
  "editor.formatOnSave": false,

  // Auto fix
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.organizeImports": "never"
  },

  // Silent the stylistic rules in you IDE, but still auto fix them
  "eslint.rules.customizations": [
    { "rule": "style/*", "severity": "off" },
    { "rule": "*-indent", "severity": "off" },
    { "rule": "*-spacing", "severity": "off" },
    { "rule": "*-spaces", "severity": "off" },
    { "rule": "*-order", "severity": "off" },
    { "rule": "*-dangle", "severity": "off" },
    { "rule": "*-newline", "severity": "off" },
    { "rule": "*quotes", "severity": "off" },
    { "rule": "*semi", "severity": "off" }
  ],

  // Enable eslint for all supported languages
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "vue",
    "html",
    "markdown",
    "json",
    "jsonc",
    "yaml"
  ]
`;

// src/cli/utils.ts
import { execSync } from "child_process";
function isGitClean() {
  try {
    execSync("git diff-index --quiet HEAD --");
    return true;
  } catch (error) {
    return false;
  }
}

// src/cli/run.ts
var SKIP_PROMPT = !!process.env.SKIP_PROMPT;
var SKIP_GIT_CHECK = !!process.env.SKIP_GIT_CHECK;
async function run() {
  const cwd = process.cwd();
  const pathFlatConfig = path.join(cwd, "eslint.config.js");
  const pathPackageJSON = path.join(cwd, "package.json");
  const pathESLintIngore = path.join(cwd, ".eslintignore");
  if (fs.existsSync(pathFlatConfig)) {
    console.log(c2.yellow(`${WARN} eslint.config.js already exists, migration wizard exited.`));
    return;
  }
  if (!SKIP_GIT_CHECK && !isGitClean())
    throw new Error("There are uncommitted changes in the current repository, please commit them and try again");
  console.log(c2.cyan(`${ARROW} bumping @antfu/eslint-config to v${version}`));
  const pkgContent = await fsp.readFile(pathPackageJSON, "utf-8");
  const pkg = JSON.parse(pkgContent);
  pkg.devDependencies ?? (pkg.devDependencies = {});
  pkg.devDependencies["@antfu/eslint-config"] = `^${version}`;
  await fsp.writeFile(pathPackageJSON, JSON.stringify(pkg, null, 2));
  console.log(c2.green(`${CHECK} changes wrote to package.json`));
  const eslintIgnores = [];
  if (fs.existsSync(pathESLintIngore)) {
    console.log(c2.cyan(`${ARROW} migrating existing .eslintignore`));
    const content = await fsp.readFile(pathESLintIngore, "utf-8");
    const parsed = parse(content);
    const globs = parsed.globs();
    for (const glob of globs) {
      if (glob.type === "ignore")
        eslintIgnores.push(...glob.patterns);
      else if (glob.type === "unignore")
        eslintIgnores.push(...glob.patterns.map((pattern) => `!${pattern}`));
    }
  }
  let eslintConfigContent = "";
  const antfuConfig = `${eslintIgnores.length ? `ignores: ${JSON.stringify(eslintIgnores)}` : ""}`;
  if (pkg.type === "module") {
    eslintConfigContent = `
import antfu from '@antfu/eslint-config'

export default antfu({
${antfuConfig}
})
`.trimStart();
  } else {
    eslintConfigContent = `
const antfu = require('@antfu/eslint-config').default

module.exports = antfu({
${antfuConfig}
})
`.trimStart();
  }
  await fsp.writeFile(pathFlatConfig, eslintConfigContent);
  console.log(c2.green(`${CHECK} created eslint.config.js`));
  const files = fs.readdirSync(cwd);
  const legacyConfig = [];
  files.forEach((file) => {
    if (file.includes("eslint") || file.includes("prettier"))
      legacyConfig.push(file);
  });
  if (legacyConfig.length) {
    console.log(`${WARN} you can now remove those files manually:`);
    console.log(`   ${c2.dim(legacyConfig.join(", "))}`);
  }
  let promptResult = {
    updateVscodeSettings: true
  };
  if (!SKIP_PROMPT) {
    try {
      promptResult = await prompts({
        initial: true,
        message: "Update .vscode/settings.json for better VS Code experience?",
        name: "updateVscodeSettings",
        type: "confirm"
      }, {
        onCancel: () => {
          throw new Error(`Cancelled`);
        }
      });
    } catch (cancelled) {
      console.log(cancelled.message);
      return;
    }
  }
  if (promptResult?.updateVscodeSettings ?? true) {
    const dotVscodePath = path.join(cwd, ".vscode");
    const settingsPath = path.join(dotVscodePath, "settings.json");
    if (!fs.existsSync(dotVscodePath))
      await fsp.mkdir(dotVscodePath, { recursive: true });
    if (!fs.existsSync(settingsPath)) {
      await fsp.writeFile(settingsPath, `{${vscodeSettingsString}}
`, "utf-8");
      console.log(c2.green(`${CHECK} created .vscode/settings.json`));
    } else {
      let settingsContent = await fsp.readFile(settingsPath, "utf8");
      settingsContent = settingsContent.trim().replace(/\s*}$/, "");
      settingsContent += settingsContent.endsWith(",") || settingsContent.endsWith("{") ? "" : ",";
      settingsContent += `${vscodeSettingsString}}
`;
      await fsp.writeFile(settingsPath, settingsContent, "utf-8");
      console.log(c2.green(`${CHECK} updated .vscode/settings.json`));
    }
  }
  console.log(c2.green(`${CHECK} migration completed`));
  console.log(`Now you can update the dependencies and run ${c2.blue("eslint . --fix")}
`);
}

// src/cli/index.ts
function header() {
  console.log(`
${c3.green(`@antfu/eslint-config `)}${c3.dim(`v${version}`)}`);
}
var instance = yargs(hideBin(process2.argv)).scriptName("@antfu/eslint-config").usage("").command(
  "migrate",
  "Migrate from legacy config to new flat config",
  (args) => args.help(),
  async (_args) => {
    header();
    console.log();
    try {
      await run();
    } catch (error) {
      console.error(c3.inverse(c3.red(" Failed to migrate ")));
      console.error(c3.red(`${CROSS} ${String(error)}`));
      process2.exit(1);
    }
  }
).command("*", false, (args) => args, () => {
  header();
  instance.showHelp();
}).showHelpOnFail(false).alias("h", "help").version("version", version).alias("v", "version");
instance.help().argv;
